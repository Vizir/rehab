// Generated by CoffeeScript 1.6.2
(function() {
  var Rehab, fs, path, tsort, wrench;

  module.exports = tsort = function(edges) {
    var Node, nodes, sorted, visit, visited;

    nodes = {};
    sorted = [];
    visited = {};
    Node = function(id) {
      this.id = id;
      this.afters = [];
    };
    edges.forEach(function(v) {
      var from, to;

      from = v[0];
      to = v[1];
      if (!nodes[from]) {
        nodes[from] = new Node(from);
      }
      if (!nodes[to]) {
        nodes[to] = new Node(to);
      }
      nodes[from].afters.push(to);
    });
    Object.keys(nodes).forEach(visit = function(idstr, ancestors) {
      var id, node;

      node = nodes[idstr];
      id = node.id;
      if (visited[idstr]) {
        return;
      }
      if (!Array.isArray(ancestors)) {
        ancestors = [];
      }
      ancestors.push(id);
      visited[idstr] = true;
      node.afters.forEach(function(afterID) {
        if (ancestors.indexOf(afterID) >= 0) {
          throw new Error("closed chain : " + afterID + " is in " + id);
        }
        visit(afterID.toString(), ancestors.map(function(v) {
          return v;
        }));
      });
      return sorted.unshift(id);
    });
    return sorted;
  };

  wrench = require('wrench');

  fs = require('fs');

  path = require('path');

  module.exports = Rehab = (function() {
    function Rehab() {}

    String.prototype.beginsWith = function(str) {
      if (this.match(new RegExp("^" + str))) {
        return true;
      } else {
        return false;
      }
    };

    String.prototype.endsWith = function(str) {
      if (this.match(new RegExp("" + str + "$"))) {
        return true;
      } else {
        return false;
      }
    };

    Rehab.prototype.REQ_TOKEN = "#_require";

    Rehab.prototype.REQ_MAIN_NODE = "__MAIN__";

    Rehab.prototype.process = function(folder) {
      var depGraph, depList;

      depGraph = this.processDependencyGraph(folder);
      depGraph = this.normalizeFilename(folder, depGraph);
      depList = this.processDependencyList(depGraph);
      return depList.reverse();
    };

    Rehab.prototype.processDependencyGraph = function(folder) {
      var depGraph, f, _i, _len, _ref;

      depGraph = [];
      _ref = this.getSourceFiles(folder);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        this.parseRequiredFile(folder, f, depGraph);
      }
      return depGraph;
    };

    Rehab.prototype.normalizeFilename = function(folder, depGraph) {
      var edge, file, fileDep, fullPath, _i, _len, _ref;

      for (_i = 0, _len = depGraph.length; _i < _len; _i++) {
        edge = depGraph[_i];
        if (edge[1] === this.REQ_MAIN_NODE) {
          continue;
        }
        fileDep = this.normalizeCoffeeFilename(edge[0]);
        file = this.normalizeCoffeeFilename(edge[1]);
        fullPath = path.resolve(path.dirname(fileDep), file);
        file = path.join(folder, path.relative(folder, fullPath));
        [].splice.apply(edge, [0, 2].concat(_ref = [fileDep, file])), _ref;
      }
      return depGraph;
    };

    Rehab.prototype.normalizeCoffeeFilename = function(file) {
      if (!file.endsWith(".coffee")) {
        file = "" + file + ".coffee";
      }
      file = path.normalize(file);
      return file;
    };

    Rehab.prototype.processDependencyList = function(depGraph) {
      var depList,
        _this = this;

      depList = tsort(depGraph);
      return depList.filter(function(i) {
        return !i.beginsWith(_this.REQ_MAIN_NODE);
      });
    };

    Rehab.prototype.getSourceFiles = function(folder) {
      var file, files, _i, _len, _results;

      files = wrench.readdirSyncRecursive(folder);
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (file.endsWith('.coffee')) {
          _results.push(file);
        }
      }
      return _results;
    };

    Rehab.prototype.parseRequiredLine = function(line) {
      return line.replace("" + this.REQ_TOKEN + " ", "");
    };

    Rehab.prototype.parseRequiredFile = function(folder, file, depGraph) {
      var content, fileName, line, lines, _i, _len, _results;

      fileName = path.join(folder, file);
      depGraph.push([fileName, this.REQ_MAIN_NODE]);
      content = fs.readFileSync(fileName, 'utf8');
      lines = content.split('\n');
      _results = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (line.slice(-1) === '\r') {
          line = line.slice(0, -1);
        }
        line = line.trim();
        if (line.beginsWith(this.REQ_TOKEN)) {
          _results.push(depGraph.push([fileName, this.parseRequiredLine(line)]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Rehab;

  })();

}).call(this);
